# Generated by Django 2.1 on 2018-09-09 09:50

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('rowid', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of the event, limited to 100 characters.', max_length=100)),
                ('dates', models.CharField(blank=True, help_text='\n                  The dates for the event in one of the following formats:<br />\n                  A single date "dd - mon"; for example "2 Jul"<br />\n                  A range of dates as "dd - dd mon"; for example "3 - 6 Sep"<br />\n                  "November" (placeholder)<br />\n                  We use this condensed format for inclusion in programmes.\n                  ', max_length=12)),
                ('start_date', models.DateField(help_text='\n                  Enter the start date of the event in DD/MM/YYYY format.<br />\n                  Ensure that this is consistent with the value entered for "Dates" above.<br />\n                  The start date isn\'t displayed but controls the listing of events. \n                  ')),
                ('end_date', models.DateField(blank=True, help_text='\n                  Enter the end date of the event in DD/MM/YYYY format or leave blank to default to start date for a one day event.<br />\n                  Ensure that this is consistent with the value entered for "Dates" above.<br />\n                  The end date isn\'t displayed but controls the listing of events. \n                  ')),
                ('times', models.CharField(blank=True, help_text='\n                  If any of the performances do not start at 7.30pm, enter the times for event; for example:<br />\n                  "Sat matinee 2.30pm"<br />\n                  "Wed - Fri 7.15pm; Sat 1.30pm & 6pm"<br />\n                  "7pm" \n                  ', max_length=12)),
                ('presented_by', models.CharField(blank=True, help_text='\n                  Enter who the event is Presented By if it isn\'t just the member Society.<br />\n                  Usually this can be left to default to the member Society but not always; for example:<br />\n                  "Derby East Scout & Guide Gang Show" overrides member Society "Flying High 2016"<br />\n                  "Derby Cathedral Concerts, with Derby Cathedral Choir" overrides member Society "Derby Cathedral Concerts"<br />\n                  "Derby Theatre" where no member Society is specified for The Eagle Awards \n                  ', max_length=50)),
                ('box_office', models.CharField(blank=True, help_text='\n                  Enter the contact details for Box Office enquiries for the event; for example:<br />\n                  "01332 593939"<br />\n                  "01773 829248 - Free"<br />\n                  "Derby Live Box Office - 01332 255800" \n                  ', max_length=50)),
                ('status', models.CharField(choices=[('PLACEHOLDER', 'Placeholder'), ('CONFIRMED', 'Confirmed')], help_text='\n                  Indicate whether this is a placeholder or whether the event details are confirmed.<br />\n                  Only when the details are confirmed will an event be visible to the public in the DATA Diary.<br />\n                  Placeholders are only visible to DATA Diary administrators as a planning aid. \n                  ', max_length=11)),
                ('card', models.IntegerField(choices=[(2, 'Yes (without image)'), (1, 'Yes (with image)'), (0, 'No')], db_column='use_desc', help_text='\n                  Indicates whether the event has a custom card associated with it and (if it does) whether that custom card is associated with an image or not.\n                  ', verbose_name='Custom card and image choice')),
                ('image', models.URLField(blank=True, help_text='\n                  The HTML associated with the card image.\n                  ', null=True)),
                ('description', models.TextField(blank=True, help_text='\nEnter a free text description of the event in HTML.\n                  ')),
            ],
            options={
                'db_table': 'event',
                'ordering': ['start_date', 'end_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NewsItem',
            fields=[
                ('rowid', models.IntegerField(primary_key=True, serialize=False)),
                ('published_date', models.DateField(help_text='\n                  The publication date of the news item.\n                  ')),
                ('title', models.CharField(help_text='The title of the news item, limited to 100 characters.', max_length=100)),
                ('precis', models.CharField(help_text='A one line precis of the news item.', max_length=250)),
                ('item_text', models.TextField(help_text='\nEnter a free text description of the event in HTML.\n                  ')),
            ],
            options={
                'db_table': 'whatson_news_item',
                'ordering': ['-published_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('address1', models.CharField(blank=True, help_text='The first line of the address.', max_length=30)),
                ('address2', models.CharField(blank=True, help_text='The second line of the address.', max_length=30)),
                ('address3', models.CharField(blank=True, help_text='The third line of the address.', max_length=30)),
                ('address4', models.CharField(blank=True, help_text='The fourth line of the address.', max_length=30)),
                ('postcode', models.CharField(blank=True, help_text='The postcode for the address.', max_length=10)),
                ('rowid', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of the organisation, limited to 80 characters.', max_length=80, unique=True)),
                ('type', models.CharField(choices=[('whatson_society', 'Society'), ('whatson_venue', 'Venue'), ('whatson_organisation', 'Organisation')], help_text='\n            The type of the organisation, which is one of<br />\n            Society = A DATA member society presenting events;<br />\n            Venue = A venue hosting events;<br />\n            Organisation = Neither of the above but linked to some of our contacts.\n                  ', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='A contact email address for the organisation.', max_length=254)),
                ('website', models.URLField(blank=True, help_text='A web site address for the organisation.')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive')], help_text='\nThe status of the organisation, which can be "Active" or "Inactive".<br />\nOrganisations in inactive status will not be listed for selection in drop-down\nlists.<br />\nMember societies that are inactive can not list events.\n                  ', max_length=8)),
                ('paid_in_period', models.BooleanField(help_text='\nA flag that is only applicable to organisations that correspond to member\nsocieties. It indicates whether or not the member society has paid its DATA\nsubscription fee in the current subscription period.\n                  ', null=True)),
                ('description', models.TextField(blank=True, help_text='\nAn optional description for the organisation. This should be plain text, i.e. no\nHTML markup. Ideally a single paragraph. It must be less that 500 characters.\n                  ', max_length=500)),
            ],
            options={
                'db_table': 'organisation',
                'ordering': ['name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OrganisationFunction',
            fields=[
                ('rowid', models.IntegerField(editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The name of the function, limited to 50 characters.', max_length=50)),
                ('email', models.EmailField(blank=True, help_text='An email address associated with the function.', max_length=254, null=True, unique=True)),
                ('organisation_rowid', models.ForeignKey(db_column='organisation_rowid', on_delete=django.db.models.deletion.CASCADE, to='whatson.Organisation')),
            ],
            options={
                'db_table': 'organisation_function',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('address1', models.CharField(blank=True, help_text='The first line of the address.', max_length=30)),
                ('address2', models.CharField(blank=True, help_text='The second line of the address.', max_length=30)),
                ('address3', models.CharField(blank=True, help_text='The third line of the address.', max_length=30)),
                ('address4', models.CharField(blank=True, help_text='The fourth line of the address.', max_length=30)),
                ('postcode', models.CharField(blank=True, help_text='The postcode for the address.', max_length=10)),
                ('rowid', models.IntegerField(editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, help_text='The email address associated with the person.', max_length=254, null=True, unique=True)),
                ('first_name', models.CharField(help_text="The person's first name.", max_length=30)),
                ('surname', models.CharField(help_text="The person's surname.", max_length=30)),
                ('title', models.CharField(blank=True, help_text='A title that the person has.', max_length=30)),
                ('telephone', models.CharField(blank=True, help_text="The person's telephone number.", max_length=15)),
                ('subscriber', models.BooleanField(help_text='\nWhether or not the person is subscribed to receive the monthly DATA Diary email.\n                  ')),
                ('secret', models.TextField(blank=True, editable=False, help_text="\nStores a randomly generated secret for security purposes; for example to protect\nagainst malicious unsubscribe requests by a third-party on behalf of email\naddresses that they have somehow obtained. This is a secret associated directly\nwith the person rather than with a user so that it can be used in those\nscenarios where it can't be guaranteed that the person has registered a user\naccount.\n                  ")),
            ],
            options={
                'db_table': 'person',
                'ordering': ['surname', 'first_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PersonInOrganisation',
            fields=[
                ('rowid', models.IntegerField(editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(blank=True, help_text='The role that the person has in the organisation.', max_length=20, null=True)),
                ('status', models.CharField(blank=True, help_text="The status of the association. I don't think we're using this.", max_length=10)),
                ('primary_contact', models.IntegerField(choices=[(1, 'Yes'), (0, 'No')], default=0, help_text='Indicates if somebody is the primary contact for their organisation.')),
                ('organisation_rowid', models.ForeignKey(db_column='organisation_rowid', on_delete=django.db.models.deletion.PROTECT, to='whatson.Organisation')),
                ('person_rowid', models.ForeignKey(db_column='person_rowid', on_delete=django.db.models.deletion.PROTECT, to='whatson.Person', verbose_name='Person')),
            ],
            options={
                'db_table': 'person_in_organisation',
                'managed': True,
                'verbose_name_plural': 'Persons in organisation',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('userid', models.CharField(help_text="The user's userid that they've selected when registering.", max_length=20, primary_key=True, serialize=False, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('rep', 'Rep')], help_text='\nThe user\'s role. This can only be one of "Admin" or "Rep". It is determined at\nthe point that the user registers their user account.\n                  ', max_length=5)),
                ('password', models.CharField(editable=False, help_text="A hash of the users' password. We do <b>not</b> store passwords in plain text.", max_length=20)),
                ('status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('UNCONFIRMED', 'Unconfirmed')], help_text='\nThe staus of the user account. When user accounts are regsitered they are\ninitially in an "Unconfirmed" status. An email is sent to the email address\nassociated with the user account. That email contains a link to confirm the\nuser account. Clicking on that link changes the status of the user account to\n"Confirmed".\n                  ', max_length=12)),
                ('secret', models.TextField(blank=True, editable=False, help_text='\nUsed to store a randomly generated secret for security purposes; for example\nif an email is sent out with a link to confirm a user account, then a secret is\ngenerated and stored and is also used in the URL of the link in the email. That\nWay we know that it truly is the recipient of the email that is confirming the\naccount. \n                  ')),
                ('datetime', models.DateTimeField(blank=True, editable=False, help_text='\nA datetime that can be set to limit the time that certain options are available;\nfor example to restrict a password reset to within a day following the time that\nthe password reset link was requested.\n                  ')),
                ('person_rowid', models.ForeignKey(db_column='person_rowid', help_text='The person that the userid is associated with.', on_delete=django.db.models.deletion.PROTECT, to='whatson.Person', verbose_name='person')),
            ],
            options={
                'db_table': 'user',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='organisation',
            name='persons',
            field=models.ManyToManyField(through='whatson.PersonInOrganisation', to='whatson.Person'),
        ),
        migrations.AddField(
            model_name='event',
            name='society_rowid',
            field=models.ForeignKey(blank=True, db_column='society_rowid', help_text='\n\t               Select the member society that is presenting this event.<br />\n                  Very occassionally this may be left blank; for example "The Eagle Awards" presented by Derby\tTheatre.\n                  If you do leave this blank then something must be entered in "Presented by".\n                  ', limit_choices_to={'type': 'whatson_society'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='society', to='whatson.Organisation', verbose_name='Society'),
        ),
        migrations.AddField(
            model_name='event',
            name='venue_rowid',
            field=models.ForeignKey(blank=True, db_column='venue_rowid', help_text='\n                  The venue for the event.\n                  ', limit_choices_to={'type': 'whatson_venue'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='venue', to='whatson.Organisation', verbose_name='Venue'),
        ),
        migrations.AlterUniqueTogether(
            name='organisationfunction',
            unique_together={('organisation_rowid', 'name')},
        ),
    ]
